<?php

define('users', 'users.xml');

//develop/debug
//error_reporting(-1);
//$userModel = new userModel;
//var_dump($userModel->valid('admin1', 'admin1'));
//var_dump($userModel->add_username('anco', 'anco'));
//var_dump($userModel->delete_username('anco'));
//var_dump($userModel->change_password('admin1', 'CHANGED_PASS'));
//var_dump($userModel->change_global_permission('admin1', '5'));
//var_dump($userModel->add_institution_id('admin1', 'NA'));
//var_dump($userModel->add_collection_id('admin1', 'KdK'));
//var_dump($userModel->add_book_id('admin1', 'bookid'));
//var_dump($userModel->delete_institution_id('admin1', 'NA'));
//var_dump($userModel->delete_collection_id('admin1', 'KdK'));
//var_dump($userModel->delete_book_id('admin1', 'bookid'));
//var_dump($userModel->change_institution_id_permission('admin1', 'NA', '3'));
//var_dump($userModel->change_collection_id_permission('admin1', 'KdK', '3'));
//var_dump($userModel->change_book_id_permission('admin1', 'bookid', '3'));
//var_dump($userModel->change_page_from('admin1', 'bookid', '111'));
//var_dump($userModel->change_page_to('admin1', 'bookid', '222'));
//var_dump($userModel->permissions);
//$this->write();
//develop/debug


class userModel
{

  public $permissions;
  public $memory;
  public $xmlWriter;

  function __construct()
  {
    $this->read();
  }

  function read()
  {
    $xml = '<users>';
    foreach (simplexml_load_file(users) as $k => $v)
    {
      if (is_file($k . '.xml'))
      {
        $xml .= '<' . $k . '>';
        $xml .= '<password>' . $v->password . '</password>';
        $xml .= preg_replace('/<\?xml.*\?>/', '', file_get_contents($k . '.xml'));
        $xml .= '</' . $k . '>';
      }
    }
    $xml .= '</users>';
    $this->permissions = simplexml_load_string($xml);
  }

  function write()
  {
    $xml_users = '<users>';
    foreach ($this->permissions as $k => $v)
    {
      $xml_users .= '<' . $k . '>';
      $xml_users .= '<password>' . $v->password . '</password>';
      $xml_users .= '</' . $k . '>';
    }
    $xml_users .= '</users>';

    $dom_users = new DOMDocument;
    $dom_users->preserveWhiteSpace = false;
    $dom_users->loadXML($xml_users);
    $dom_users->formatOutput = true;
    file_put_contents(users, $dom_users->saveXML());

    foreach ($this->permissions as $k => $v)
    {
      $dom_permissions = new DOMDocument;
      $dom_permissions->preserveWhiteSpace = false;
      $dom_permissions->loadXML($v->permissions->asXML());
      $dom_permissions->formatOutput = true;
      file_put_contents($k . '.xml', $dom_permissions->saveXML());
    }
  }

  function addPrefixSuffixSpaceXmlValues($xml)
  {
    $xml = str_replace('>', '> ', $xml);
    $xml = str_replace('<', ' <', $xml);
  }

  function delPrefixSuffixSpaceXmlValues($xml)
  {
    $xml = str_replace('> ', '>', $xml);
    $xml = str_replace(' <', '<', $xml);
  }

  function valid($username, $password)
  {
    if ($this->permissions->$username->password == $password)
      return true;
    return false;
  }

  function makemonkpw($password)
  {
    exec('/target/gpfs2/monk/bin/makemonkpw -enc \'' . escapeshellarg($password) . '\'', $monkpw);
    if (isset($monkpw[0]))
      return $monkpw[0];
    else
      return $password;
  }

  function add_username($target_username, $target_password)
  {
    if (!isset($this->permissions->$target_username) && strlen($target_password) && strlen($target_username))
    {
      $this->permissions->$target_username->password = $this->makemonkpw($target_password);
      $this->permissions->$target_username->permissions->global_permission = '1';
      return true;
    }
    return false;
  }

  function delete_username($target_username)
  {
    if (isset($this->permissions->$target_username))
    {
      unset($this->permissions->$target_username);
      return true;
    }
    return false;
  }

  function change_password($target_username, $target_password)
  {
    if (isset($this->permissions->$target_username) && strlen($target_password))
    {
      $this->permissions->$target_username->password = $this->makemonkpw($target_password);
      return true;
    }
    return false;
  }

  function change_global_permission($target_username, $global_permission)
  {
    if (isset($this->permissions->$target_username->permissions->global_permission))
    {
      $this->permissions->$target_username->permissions->global_permission = $global_permission;
      return true;
    }
    return false;
  }

  function add_institution_id($target_username, $institution_id)
  {
    if (isset($this->permissions->$target_username))
    {
      $this->permissions->$target_username->permissions->institutions->institution[]->institution_id = $institution_id;
      $this->permissions->$target_username->permissions->institutions->institution[count($this->permissions->$target_username->permissions->institutions->institution) - 1]->institution_permission = '1';
      return true;
    }
    return false;
  }

  function add_collection_id($target_username, $collection_id)
  {
    if (isset($this->permissions->$target_username))
    {
      $this->permissions->$target_username->permissions->collections->collection[]->collection_id = $collection_id;
      $this->permissions->$target_username->permissions->collections->collection[count($this->permissions->$target_username->permissions->collections->collection) - 1]->collection_permission = '1';
      return true;
    }
    return false;
  }

  function add_book_id($target_username, $book_id)
  {
    if (isset($this->permissions->$target_username))
    {
      $this->permissions->$target_username->permissions->books->book[]->book_id = $book_id;
      $count = count($this->permissions->$target_username->permissions->books->book) - 1;
      $this->permissions->$target_username->permissions->books->book[$count]->book_permission = '1';
      $this->permissions->$target_username->permissions->books->book[$count]->page_from = '1';
      $this->permissions->$target_username->permissions->books->book[$count]->page_to = '9999';
      return true;
    }
    return false;
  }

  function delete_institution_id($target_username, $institution_id)
  {
    foreach ($this->permissions->xpath('/users/' . $target_username . '/permissions/institutions/institution/institution_id') as $k => $v)
    {
      if ($v == $institution_id)
      {
        unset($this->permissions->$target_username->permissions->institutions->institution[$k]);
        return true;
      }
    }
    return false;
  }

  function delete_collection_id($target_username, $collection_id)
  {
    foreach ($this->permissions->xpath('/users/' . $target_username . '/permissions/collections/collection/collection_id') as $k => $v)
    {
      if ($v == $collection_id)
      {
        unset($this->permissions->$target_username->permissions->collections->collection[$k]);
        return true;
      }
    }
    return false;
  }

  function delete_book_id($target_username, $book_id)
  {
    foreach ($this->permissions->xpath('/users/' . $target_username . '/permissions/books/book/book_id') as $k => $v)
    {
      if ($v == $book_id)
      {
        unset($this->permissions->$target_username->permissions->books->book[$k]);
        return true;
      }
    }
    return false;
  }

  function change_institution_id_permission($target_username, $institution_id, $institution_permission)
  {
    foreach ($this->permissions->xpath('/users/' . $target_username . '/permissions/institutions/institution/institution_id') as $k => $v)
    {
      if ($v == $institution_id)
      {
        $this->permissions->$target_username->permissions->institutions->institution[$k]->institution_permission = $institution_permission;
        return true;
      }
    }
    return false;
  }

  function change_collection_id_permission($target_username, $collection_id, $collection_permission)
  {
    foreach ($this->permissions->xpath('/users/' . $target_username . '/permissions/collections/collection/collection_id') as $k => $v)
    {
      if ($v == $collection_id)
      {
        $this->permissions->$target_username->permissions->collections->collection[$k]->collection_permission = $collection_permission;
        return true;
      }
    }
    return false;
  }

  function change_book_id_permission($target_username, $book_id, $book_permission)
  {
    foreach ($this->permissions->xpath('/users/' . $target_username . '/permissions/books/book/book_id') as $k => $v)
    {
      if ($v == $book_id)
      {
        $this->permissions->$target_username->permissions->books->book[$k]->book_permission = $book_permission;
        return true;
      }
    }
    return false;
  }

  function change_page_from($target_username, $book_id, $page_from)
  {
    foreach ($this->permissions->xpath('/users/' . $target_username . '/permissions/books/book/book_id') as $k => $v)
    {
      if ($v == $book_id)
      {
        $this->permissions->$target_username->permissions->books->book[$k]->page_from = $page_from;
        return true;
      }
    }
    return false;
  }

  function change_page_to($target_username, $book_id, $page_to)
  {
    foreach ($this->permissions->xpath('/users/' . $target_username . '/permissions/books/book/book_id') as $k => $v)
    {
      if ($v == $book_id)
      {
        $this->permissions->$target_username->permissions->books->book[$k]->page_to= $page_to;
        return true;
      }
    }
    return false;
  }

  function convert_permission($nr)
  {
    if ($nr == 10)
      return 'Admin';
    else if ($nr == 9)
      return 'Global admin';
    else if ($nr == 8)
      return 'Ingest admin';
    else if ($nr == 7)
      return 'Transcription admin';
    else if ($nr == 6)
      return 'Transcribent admin';
    else if ($nr == 5)
      return 'Trainer';
    else if ($nr == 4)
      return 'Trainee';
    else if ($nr == 3)
      return 'Visitor';
    else if ($nr == 2)
      return 'Visitor';
    else if ($nr == 1)
      return 'Visitor';
    else
      return 'Visitor';
  }

}

?>
